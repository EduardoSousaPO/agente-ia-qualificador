// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Tenants (Multi-tenancy)
model Tenant {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(255)
  slug      String?  @unique @db.VarChar(255)
  code      String?  @unique @db.VarChar(255)  // NOVO: Company code
  domain    String?  @unique @db.VarChar(255)
  settings  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  users                User[]
  leads                Lead[]
  auditEvents          AuditEvent[]
  memberships          Membership[]
  invites              Invite[]
  joinRequests         JoinRequest[]  // NOVO
  defaultProfiles      Profile[]      @relation("ProfileDefaultTenant")
  knowledgeBase        KnowledgeBase[]

  @@map("tenants")
}

// Usuários do sistema
model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  email     String   @unique @db.VarChar(255)
  role      String   @default("operator") @db.VarChar(50) // admin, closer, operator
  name      String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  meetings    Meeting[]
  auditEvents AuditEvent[]

  @@map("users")
}

// Leads do sistema
model Lead {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId       String   @map("tenant_id") @db.Uuid
  name           String   @db.VarChar(255)
  email          String?  @db.VarChar(255)
  phone          String   @db.VarChar(50)
  origem         String?  @db.VarChar(100) // youtube, newsletter, manual, inbound
  inseridoManual Boolean  @default(false) @map("inserido_manual")
  tags           Json     @default("[]")
  status         String   @default("novo") @db.VarChar(50) // novo, em_conversa, qualificado, desqualificado
  score          Int      @default(0)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  sessions       Session[]
  qualificacoes  Qualificacao[]
  meetings       Meeting[]

  @@map("leads")
}

// Sessões de conversa
model Session {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId      String   @map("lead_id") @db.Uuid
  status      String   @default("ativa") @db.VarChar(50) // ativa, finalizada, pausada
  currentStep String?  @map("current_step") @db.VarChar(100)
  context     Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  lead     Lead      @relation(fields: [leadId], references: [id])
  messages Message[]

  @@map("sessions")
}

// Mensagens das conversas
model Message {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId   String   @map("session_id") @db.Uuid
  direction   String   @db.VarChar(10) // inbound, outbound
  content     String   @db.Text
  messageType String   @default("text") @map("message_type") @db.VarChar(50)
  twilioSid   String?  @map("twilio_sid") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  session Session @relation(fields: [sessionId], references: [id])

  @@map("messages")
}

// Dados de qualificação
model Qualificacao {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId                String   @map("lead_id") @db.Uuid
  patrimonioFaixa       String?  @map("patrimonio_faixa") @db.VarChar(100)
  objetivo              String?  @db.Text
  urgencia              String?  @db.VarChar(50)
  interesseEspecialista Boolean? @map("interesse_especialista")
  scoreFinal            Int?     @map("score_final")
  observacoes           String?  @db.Text
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])

  @@map("qualificacoes")
}

// Agendamentos/Reuniões
model Meeting {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId            String    @map("lead_id") @db.Uuid
  closerId          String?   @map("closer_id") @db.Uuid
  horarioSugestao1  DateTime? @map("horario_sugestao_1") @db.Timestamptz(6)
  horarioSugestao2  DateTime? @map("horario_sugestao_2") @db.Timestamptz(6)
  status            String    @default("pendente") @db.VarChar(50) // pendente, confirmado, realizado
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  lead   Lead  @relation(fields: [leadId], references: [id])
  closer User? @relation(fields: [closerId], references: [id])

  @@map("meetings")
}

// Log de auditoria
model AuditEvent {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId     String   @map("tenant_id") @db.Uuid
  userId       String?  @map("user_id") @db.Uuid
  action       String   @db.VarChar(100)
  resourceType String?  @map("resource_type") @db.VarChar(100)
  resourceId   String?  @map("resource_id") @db.Uuid
  details      Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@map("audit_events")
}

// ========== MULTI-TENANT SPEC MODELS ==========

// Profiles (vincula auth.users)
model Profile {
  userId          String   @id @map("user_id") @db.Uuid
  defaultTenantId String?  @map("default_tenant_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  defaultTenant Tenant?      @relation("ProfileDefaultTenant", fields: [defaultTenantId], references: [id])
  memberships   Membership[]

  @@map("profiles")
}

// Memberships (many-to-many users/tenants)
model Membership {
  tenantId  String   @map("tenant_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String   @db.VarChar(50) // owner, admin, member
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([tenantId, userId])
  @@index([userId])
  @@map("memberships")
}

// Base de Conhecimento (Knowledge Base)
model KnowledgeBase {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId]) // Um conhecimento por tenant
  @@map("knowledge_base")
}

// NOVA TABELA: Join Requests
model JoinRequest {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId    String    @map("tenant_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  companyName String    @map("company_name") @db.VarChar(255)
  companyCode String    @map("company_code") @db.VarChar(255)
  status      String    @default("pending") @db.VarChar(50) // pending, approved, rejected
  approvedBy  String?   @map("approved_by") @db.Uuid
  approvedAt  DateTime? @map("approved_at") @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("join_requests")
}

// Invites (sistema de convites)
model Invite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  email     String   @db.VarChar(255)
  role      String   @db.VarChar(50) // admin, member
  status    String   @default("pending") @db.VarChar(50) // pending, accepted, revoked
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@map("invites")
}

